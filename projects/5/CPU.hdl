// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM outpu\t to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

        DMux(in=true, sel=instruction[15], a=aInstruction, b=cInstruction );
        
        // C-Dest instructions
        DMux8Way(in=true, sel=instruction[3..5] , a=valueShouldNotBeStored, b=storeInM, c= storeInD, d=storeInMD, e=storeInARegister, f=storeInAM , g=storeInAD, h=storeAMD );

        // A Register
        Or(a=storeInARegister, b=storeInAM, out=storeInAxAM );
        Or(a=storeInAD, b=storeAMD, out=storeInADOrAMD );
        Or(a=storeInAxAM, b=storeInADOrAMD, out=cStoreInA );
        Or(a=aInstruction, b=cStoreInA, out=storeInA);

        Register(in=instruction, load=storeInA, out=registerA);

        // D Register
        Or(a=storeInMD, b=storeAMD, out=storeInMDxAMD );
        Or(a=storeInAD, b=storeInD, out=storeInADxD );
        Or(a=storeInMDxAMD, b=storeInADxD, out=cStoreInD );

        Register(in=instruction, load=cStoreInD, out=registerD );

        // M
        Or(a=storeInM, b=storeInAM, out=storeInMxAM);
        Or(a=storeInMxAM, b=storeInMDxAMD, out=storeInRam);

        //ALU
        Mux16(a=registerA, b=inM, sel=instruction[12], out=aRegisterOrM );
        
        ALU(x=registerD, y=aRegisterOrM, zx=instruction[11] , nx=instruction[10] , zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=zero, ng=negative );

        // Should store in memory ( RAM[A] )
        Mux16(a=false, b=instruction, sel=storeInRam, out=outM);

        // PC
        Not(in=reset, out=notReset );
        PC(in=false, load=false, inc=notReset, reset=reset, out[0..14]=pc );


}