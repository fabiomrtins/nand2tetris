// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

        DMux(in=true, sel=instruction[15], a=aInstruction, b=cInstruction );

        // Address Register
        And(a=cInstruction, b=instruction[5], out=isCInstructionAndShouldStoreInA);
        Or(a=aInstruction, b=isCInstructionAndShouldStoreInA, out=storeInA);

        Mux16(a=instruction, b=aluInstruction, sel=isCInstructionAndShouldStoreInA, out=instructionOrAluInstruction);
        ARegister(in=instructionOrAluInstruction, load=storeInA, out=outARegister, out[0..14]=addressM);

        // Data Register
        And(a=cInstruction, b=instruction[4] , out=cStoreInD );
        DRegister(in=aluInstruction, load=cStoreInD, out=outDRegister );

        // M
        And(a=cInstruction, b=instruction[3], out=writeM );

        //ALU
        Mux16(a=outARegister, b=inM, sel=instruction[12], out=aRegisterOrM);

        ALU(x=outDRegister, y=aRegisterOrM, zx=instruction[11] , nx=instruction[10] , zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluInstruction, out=outM, zr=zero, ng=negative );

        Not(in=zero, out=notZero);
        Not(in=negative, out=notNegative);

        // JGT = !zr && !ng
        And(a=notNegative, b=notZero, out=notNegativeAndNotZero);
        And(a=instruction[0], b=notNegativeAndNotZero, out=JGT);
        
        // JEQ = zr
        And(a=instruction[1], b=zero, out=JEQ);

        // JGE = !ng
        And(a=JEQ, b=JGT, out=JGE);

        // JLT = ng
        And(a=instruction[2], b=negative, out=JLT);

        // JNE = !zr
        Or(a=JGT, b=JLT, out=JNE);

        // JLE = ng || zr
        Or(a=JLT, b=JEQ, out=JLE);
 
        // JLT || JEQ || JGT = JMP
        Or(a=JEQ, b=JGT, out=JEQAndJGT );
        Or(a=JEQAndJGT, b=JLT, out=JMP );

        And(a=cInstruction, b=JMP, out=shouldLoadARegisterValue);

        // PC
        Not(in=reset, out=notReset );
        PC(in=outARegister, load=shouldLoadARegisterValue, inc=notReset, reset=reset, out[0..14]=pc );
}